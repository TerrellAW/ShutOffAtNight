@implements IDisposable

<h3 class="text-center">Timer</h3>

@if (!MauiProgram.IsTimerRunning)
{
    <div class="d-flex">
        <input type="number" 
        class="form-control bg-dark text-light fs-4" 
        placeholder="Enter time in minutes" 
        onkeydown="return (event.keyCode !== 69 && event.keyCode !== 190 && event.keyCode !== 189 && event.keyCode !== 109)"
        step="1"
        min="1"
        pattern="[0-9]*"
        inputmode="numeric"
        @bind="MauiProgram.InputMinutes" />
        <button @onclick="HandleStartClick" class="btn btn-secondary fs-4">Start</button>
    </div>
}
else
{
    <div class="d-flex flex-column align-items-center text-center">
        <!--TODO: Shutdown symbol in div that goes red when InputMinutes hits zero, after 2 seconds PC shuts down-->
        @if (!MauiProgram.IsShuttingDown)
        {
            <img src="images/not_shutting_down.png" height="200" width="200" />
        }
        else
        {
            <img src="images/shutting_down.png" height="200" width="200" />
        }
        <p class="text-light"><br />Minutes remaining until shutdown:</p>
        <p class="text-light fs-1">@MauiProgram.InputMinutes</p>
        <button @onclick="HandleCancelClick" class="btn btn-danger fs-4">Cancel</button>
    </div>
}

@code {
    private CancellationTokenSource _cancellationTokenSource = new();
    private bool _isDisposed;

    public void HandleStartClick()
    {
        MauiProgram.IsTimerRunning = true;
        TimerFunction();
        Debug.WriteLine($"Input minutes: {MauiProgram.InputMinutes}");
    }

    public async Task HandleShutdown()
    {
        if (MauiProgram.InputMinutes == 0 && MauiProgram.IsTimerRunning)
        {
            MauiProgram.IsShuttingDown = true;
            StateHasChanged();
            // Shutdown PC
            await Task.Delay(2000);
            Debug.WriteLine("Shutting down PC");
            await Shutdown.ShutDown();
        }
    }

    public async Task HandleCancelClick()
    {
        _cancellationTokenSource.Cancel();
        await Shutdown.CancelShutdown();
        MauiProgram.IsTimerRunning = false;
        MauiProgram.IsShuttingDown = false;
        MauiProgram.InputMinutes = 0;
        StateHasChanged();
    }

    public async void TimerFunction()
    {
        try
        {
            using var scope = _cancellationTokenSource.Token.Register(() => _isDisposed = true);

            while (MauiProgram.IsTimerRunning && !_isDisposed)
            {
                await Task.Delay(60000, _cancellationTokenSource.Token);
                MauiProgram.InputMinutes--;
                StateHasChanged();
                await HandleShutdown();
            }
        }
        catch (OperationCanceledException)
        {
            // Timer was cancelled, clean exit
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Timer error: {ex.Message}");
            await HandleCancelClick(); // Safely reset state
        }
        finally
        {
            if (!_isDisposed)
            {
                await HandleCancelClick();
            }
        }
    }

    // Dispose of processes
    public void Dispose()
    {
        if (_isDisposed) return;

        _isDisposed = true;
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
}
